/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./graphql/context";

declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, "model">;
    crud: any;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenRootTypes {
  Profile: {
    // root type
    bio?: string | null; // String
    country?: string | null; // String
    customUrlPath?: string | null; // String
    sensMotion?: number | null; // Int
    sensStick?: number | null; // Int
    twitchName?: string | null; // String
    weaponPool: string[]; // [String!]!
    youtubeId?: string | null; // String
  };
  Query: {};
  User: {
    // root type
    discordAvatar?: string | null; // String
    discordId: string; // String!
    discriminator: string; // String!
    username: string; // String!
  };
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars["String"];
  Int: NexusGenScalars["Int"];
  Float: NexusGenScalars["Float"];
  Boolean: NexusGenScalars["Boolean"];
  ID: NexusGenScalars["ID"];
}

export interface NexusGenFieldTypes {
  Profile: {
    // field return type
    bio: string | null; // String
    country: string | null; // String
    customUrlPath: string | null; // String
    sensMotion: number | null; // Int
    sensStick: number | null; // Int
    twitchName: string | null; // String
    weaponPool: string[]; // [String!]!
    youtubeId: string | null; // String
  };
  Query: {
    // field return type
    getUserByIdentifier: NexusGenRootTypes["User"] | null; // User
  };
  User: {
    // field return type
    avatarUrl: string | null; // String
    discordAvatar: string | null; // String
    discordId: string; // String!
    discriminator: string; // String!
    fullUsername: string; // String!
    profile: NexusGenRootTypes["Profile"] | null; // Profile
    profilePath: string; // String!
    username: string; // String!
  };
}

export interface NexusGenArgTypes {
  Query: {
    getUserByIdentifier: {
      // args
      identifier: string; // String!
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Profile" | "Query" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["scalarNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
