generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(uuid())
  discordId            String                 @unique
  discordName          String
  discordDiscriminator String
  discordAvatar        String?
  discordRefreshToken  String
  twitch               String?
  twitter              String?
  youtubeId            String?
  youtubeName          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  trustedUsers         TrustRelationships[]   @relation("trustGiver")
  trustingUsers        TrustRelationships[]   @relation("trustReceiver")
  ownedOrganization    Organization?
  tournamentTeams      TournamentTeamMember[]
}

model Organization {
  id            String       @id @default(uuid())
  name          String
  /// Name in lower case to show in URL
  nameForUrl    String       @unique
  ownerId       String       @unique
  owner         User         @relation(fields: [ownerId], references: [id])
  discordInvite String
  twitter       String?
  tournaments   Tournament[]
}

model Tournament {
  id                String           @id @default(uuid())
  name              String
  /// Name in lower case to show in URL
  nameForUrl        String
  description       String?
  startTime         DateTime
  checkInTime       DateTime
  /// CSS for tournament banner's background value
  bannerBackground  String
  /// CSS for tournament banner's color value
  bannerTextHSLArgs String
  mapPool           Stage[]
  organizerId       String
  organizer         Organization     @relation(fields: [organizerId], references: [id])
  teams             TournamentTeam[]

  // There might be duplicate nameForUrl's but inside an organization they're unique
  @@unique([nameForUrl, organizerId])
}

enum Mode {
  TW
  SZ
  TC
  RM
  CB
}

model Stage {
  id                 Int          @id @default(autoincrement())
  name               String
  mode               Mode
  tournamentMapPools Tournament[]
}

model TournamentTeam {
  id           String                 @id @default(uuid())
  name         String
  checkedIn    Boolean                @default(false)
  tournamentId String
  tournament   Tournament             @relation(fields: [tournamentId], references: [id])
  inviteCode   String                 @default(uuid())
  members      TournamentTeamMember[]

  @@unique([name, tournamentId])
}

model TournamentTeamMember {
  memberId     String
  teamId       String
  tournamentId String
  captain      Boolean        @default(false)
  team         TournamentTeam @relation(fields: [teamId], references: [id])
  member       User           @relation(fields: [memberId], references: [id])

  @@unique([memberId, tournamentId])
}

// Trust relationship is defined as user allowing another user
// to add them to a tournament team
// / LFG group without them having to click a link.
model TrustRelationships {
  trustGiverId    String
  trustReceiverId String
  trustGiver      User     @relation("trustGiver", fields: [trustGiverId], references: [id])
  trustReceiver   User     @relation("trustReceiver", fields: [trustReceiverId], references: [id])
  createdAt       DateTime @default(now())

  @@unique([trustGiverId, trustReceiverId])
}
